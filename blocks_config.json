[
  {
    "name": "Input Connections and Output Connections",
    "block_id": "Hzgbjz",
    "description": "When processing a product specification and generating Blocks and Tasks, Currently the prompt does not refer input and output connections of Blocks and the connections between the Blocks, Update the prompts to  include the in/out types of each block (according to block description, usage, implementation and tasks) and the connections to other Blocks",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "ZgOpOP": {
        "task_id": "ZgOpOP",
        "task_name": "Update Specification Processing System Prompt",
        "description": "Enhance the DEFAULT_PROCESS_MARKDOWN_SPEC_SYSTEM_PROMPT_MCP to include comprehensive guidance for identifying and specifying input/output types and inter-block connections when processing specifications.",
        "acceptance_criteria": [
          "Add guidance for identifying data flow patterns in specifications",
          "Include instructions for specifying input/output types with validation rules",
          "Add requirements for defining block connections and dependencies",
          "Include examples of complex type specifications",
          "Maintain existing MCP tool integration approach",
          "Ensure prompt guides users to think about data architecture"
        ],
        "dependencies": [
          "qQbFRv"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "src/project_config.rs"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Test prompt with sample specifications containing complex data flows",
          "Validate that enhanced prompts produce better structured blocks",
          "Ensure backward compatibility with existing workflow"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "8JLcIi": {
        "task_id": "8JLcIi",
        "task_name": "Create Connection Validation Logic",
        "description": "Implement logic to validate block connections based on input/output type compatibility. This includes creating functions to check type compatibility, validate data flow integrity, and identify potential connection issues.",
        "acceptance_criteria": [
          "Implement type compatibility checking functions",
          "Create validation for input/output connection integrity",
          "Add error reporting for incompatible connections",
          "Include validation for circular dependencies",
          "Implement connection path analysis",
          "Add validation for data format compatibility"
        ],
        "dependencies": [
          "qQbFRv"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "src/models.rs",
          "src/block_handlers.rs",
          "src/validation.rs"
        ],
        "function_signatures": [
          "pub fn validate_connection_compatibility(from_output: &BlockConnection, to_input: &BlockConnection) -> Result<(), ValidationError>",
          "pub fn validate_block_connections(block: &Block, all_blocks: &[Block]) -> Result<(), ValidationError>",
          "pub fn check_circular_dependencies(blocks: &[Block]) -> Result<(), ValidationError>"
        ],
        "testing_requirements": [
          "Unit tests for type compatibility checking",
          "Integration tests for connection validation",
          "Error case testing for invalid connections",
          "Performance tests for large block networks"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "BhRioN": {
        "task_id": "BhRioN",
        "task_name": "Enhance Profession-Specific Prompts for Input/Output Types",
        "description": "Update the profession-specific prompts in profession_prompts.rs to include enhanced guidance for input/output type specifications and block connections relevant to each profession (backend, frontend, full-stack developers).",
        "acceptance_criteria": [
          "Update backend developer prompts with API input/output specifications",
          "Update frontend developer prompts with UI component data flow patterns",
          "Update full-stack developer prompts with end-to-end data flow considerations",
          "Include profession-specific examples of complex type definitions",
          "Add domain-specific validation requirements",
          "Ensure consistency with enhanced base prompts"
        ],
        "dependencies": [
          "hwLn5V",
          "Qv0Sjv"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "src/profession_prompts.rs"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Test profession-specific prompts with domain-relevant specifications",
          "Validate output quality for each profession type",
          "Ensure profession-specific patterns are correctly applied",
          "Test integration with enhanced base prompt system"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "F6ppAC": {
        "task_id": "F6ppAC",
        "task_name": "Update Task Generation System Prompt",
        "description": "Enhance the DEFAULT_GENERATE_TASKS_SYSTEM_PROMPT_MCP to include guidance for considering input/output types and block connections when breaking down components into tasks.",
        "acceptance_criteria": [
          "Add instructions for identifying data flow requirements in task breakdown",
          "Include guidance for creating tasks that implement input/output interfaces",
          "Add requirements for connection validation and testing tasks",
          "Include instructions for dependency management based on data flow",
          "Ensure tasks consider type compatibility and validation",
          "Maintain focus on granular, executable task creation"
        ],
        "dependencies": [
          "qQbFRv"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "src/project_config.rs"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Test with components having complex data flow requirements",
          "Validate tasks include proper interface implementation",
          "Ensure connection testing tasks are generated appropriately"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "WM4uss": {
        "task_id": "WM4uss",
        "task_name": "Update MCP Tools to Support Enhanced Type Specifications",
        "description": "Modify the MCP create_block and create_task tools to support the enhanced input/output type specifications and connection validation. This includes updating the tool schemas and implementations to handle the new type information.",
        "acceptance_criteria": [
          "Update create_block MCP tool schema to include enhanced input/output specifications",
          "Update create_task MCP tool to handle interface implementation requirements",
          "Add validation hooks in MCP tool execution",
          "Ensure backward compatibility with existing tool calls",
          "Update tool documentation and examples",
          "Add support for connection specification in tools"
        ],
        "dependencies": [
          "8JLcIi"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "src/mcp/tools/registry.rs",
          "src/mcp/tools/tasks.rs",
          "src/mcp/tools/mod.rs"
        ],
        "function_signatures": [
          "pub fn create_block_with_enhanced_types(name: String, description: String, inputs: Vec<EnhancedBlockConnection>, outputs: Vec<EnhancedBlockConnection>) -> Result<Block, McpError>"
        ],
        "testing_requirements": [
          "Test MCP tools with enhanced type specifications",
          "Validate tool schema compatibility",
          "Test integration with existing MCP workflow",
          "Ensure error handling for invalid type specifications"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "Qv0Sjv": {
        "task_id": "Qv0Sjv",
        "task_name": "Update Task Generation User Prompt",
        "description": "Enhance the DEFAULT_GENERATE_TASKS_USER_PROMPT_MCP to include comprehensive examples and guidelines for creating tasks that implement input/output interfaces and block connections.",
        "acceptance_criteria": [
          "Add examples of create_task calls that implement input/output interfaces",
          "Include patterns for interface validation and testing tasks",
          "Add guidance for creating connection setup and configuration tasks",
          "Include examples of data transformation and mapping tasks",
          "Provide patterns for error handling in data flow contexts",
          "Ensure examples show proper dependency management for connected components"
        ],
        "dependencies": [
          "F6ppAC"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "src/project_config.rs"
        ],
        "function_signatures": [
          "Examples should include function signatures for interface implementation"
        ],
        "testing_requirements": [
          "Create test component descriptions with complex interfaces",
          "Validate generated tasks properly implement interface requirements",
          "Test task dependency resolution for connected components",
          "Ensure examples cover integration testing scenarios"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "qQbFRv": {
        "task_id": "qQbFRv",
        "task_name": "Define Enhanced Input/Output Type Specification Format",
        "description": "Design a comprehensive format for specifying input/output types in blocks that includes data types, validation rules, format specifications, and connection requirements. This should extend the current BlockConnection structure with more detailed type information.",
        "acceptance_criteria": [
          "Define standard data type categories (primitives, objects, arrays, etc.)",
          "Specify format for complex data structures and nested types",
          "Include validation requirements in type specifications",
          "Define connection compatibility rules between block inputs/outputs",
          "Create examples for common data flow patterns",
          "Ensure backward compatibility with existing BlockConnection structure"
        ],
        "dependencies": [
          "RvuVfu"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "src/models.rs",
          "src/llm_handler.rs"
        ],
        "function_signatures": [
          "pub struct EnhancedBlockConnection { name: String, ctype: String, data_format: String, validation_rules: Vec<String>, description: String }"
        ],
        "testing_requirements": [
          "Create test cases for various data type specifications",
          "Validate type compatibility checking logic",
          "Test complex nested type definitions"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "ZzHvlm": {
        "task_id": "ZzHvlm",
        "task_name": "Create Documentation and Examples for Enhanced Prompts",
        "description": "Create comprehensive documentation and practical examples demonstrating the enhanced prompt system with input/output types and block connections. Include examples for different domains and complexity levels.",
        "acceptance_criteria": [
          "Create documentation explaining enhanced input/output type system",
          "Provide examples for different architectural patterns (microservices, monolith, etc.)",
          "Include domain-specific examples (web API, data processing, UI components)",
          "Document best practices for type specification",
          "Create troubleshooting guide for connection issues",
          "Provide migration guide from old prompt format"
        ],
        "dependencies": [
          "BhRioN",
          "WM4uss"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "docs/enhanced_prompts.md",
          "docs/type_specifications.md",
          "docs/examples/",
          "README.md"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Validate all examples are working and accurate",
          "Test documentation with new users",
          "Ensure examples cover common use cases",
          "Validate migration guide with existing projects"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "o73wnz": {
        "task_id": "o73wnz",
        "task_name": "Integration Testing and Validation",
        "description": "Perform comprehensive integration testing of the enhanced prompt system to ensure all components work together correctly and produce improved block and task specifications with proper input/output types and connections.",
        "acceptance_criteria": [
          "Test complete workflow from specification processing to task generation",
          "Validate enhanced prompts produce better structured outputs",
          "Test with various complexity levels and domains",
          "Ensure backward compatibility with existing projects",
          "Validate connection validation logic works correctly",
          "Test MCP tool integration with enhanced features",
          "Performance testing with large specifications"
        ],
        "dependencies": [
          "ZzHvlm"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "tests/integration/",
          "tests/fixtures/",
          "src/main.rs"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "End-to-end integration tests",
          "Performance benchmarks",
          "Regression testing against existing functionality",
          "User acceptance testing scenarios",
          "Error handling and edge case testing"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "RvuVfu": {
        "task_id": "RvuVfu",
        "task_name": "Analyze Current Prompt Structure for Input/Output Types",
        "description": "Examine the existing MCP prompts in project_config.rs to understand how input/output types and block connections are currently handled. Document gaps in the current prompts regarding input/output type specifications and inter-block connections.",
        "acceptance_criteria": [
          "Complete analysis of DEFAULT_PROCESS_MARKDOWN_SPEC_*_MCP prompts",
          "Complete analysis of DEFAULT_GENERATE_TASKS_*_MCP prompts",
          "Document current limitations in input/output type specifications",
          "Document current limitations in block connection specifications",
          "Identify specific areas for improvement in prompt engineering"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "src/project_config.rs",
          "src/models.rs",
          "src/llm_handler.rs"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Review existing prompt outputs to validate analysis",
          "Compare with BlockConnection and Block data structures"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "hwLn5V": {
        "task_id": "hwLn5V",
        "task_name": "Update Specification Processing User Prompt",
        "description": "Enhance the DEFAULT_PROCESS_MARKDOWN_SPEC_USER_PROMPT_MCP to include detailed instructions and examples for specifying input/output types, data flow connections, and inter-block dependencies.",
        "acceptance_criteria": [
          "Add comprehensive examples of create_block calls with detailed input/output specifications",
          "Include patterns for identifying data transformation requirements",
          "Add guidance for defining block connections based on data flow",
          "Include validation rules for input/output compatibility",
          "Provide examples of common architectural patterns (API, database, UI)",
          "Ensure examples cover complex nested data structures"
        ],
        "dependencies": [
          "ZgOpOP"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "src/project_config.rs"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Create test specifications with complex data flows",
          "Validate prompt generates correct block structures",
          "Test with various domain types (web, mobile, data processing)",
          "Ensure examples are practical and implementable"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      }
    }
  },
  {
    "name": "MCP Tool for executing tasks in Block",
    "block_id": "hM0lZG",
    "description": "Design and implement a new **MCP Tool** that processes a sequence of *block tasks* with support for task dependency resolution and execution tracking. The tool should:\n\n1. **Parse and analyze** all block tasks.\n2. **Resolve dependencies** between tasks and determine the correct execution order based on those dependencies (e.g., using topological sorting).\n3. **Execute tasks** sequentially in the correct dependency order.\n4. **Skip tasks** that have already been executed or marked as implemented.\n5. Ensure **robust logging**, error handling, and the ability to **resume execution** from the last incomplete task.\n\nInclude configuration or metadata support (e.g., JSON/YAML) for:\n\n* Declaring task definitions and dependencies.\n* Marking task status (pending, completed, failed).\n* Optionally controlling parallel execution if dependencies allow.\n\n",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Files Affected",
    "block_id": "eT7UT6",
    "description": "Files Affected refer to none real files, make sure the prompts refer to real files.",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "dependency checking need to be fixed",
    "block_id": "ocynWj",
    "description": "[COMPLETED] [COMPLETED] [COMPLETED] [COMPLETED] [COMPLETED] [FAILED]",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Block description and Tasks Impl",
    "block_id": "8w54ek",
    "description": "Task execution should refer to Block description when implementing tasks",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Forge Feature Development",
    "block_id": "mRMXPO",
    "description": "Development of new features and enhancements for the Forge IDE platform, including multi-language code generation, real-time collaboration, AI-powered analysis, testing integration, and developer experience improvements",
    "inputs": [
      {
        "name": "",
        "ctype": "",
        "description": ""
      }
    ],
    "outputs": [
      {
        "name": "",
        "ctype": "",
        "description": ""
      }
    ],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "yfnYaY": {
        "task_id": "yfnYaY",
        "task_name": "Performance Analytics",
        "description": "Implement task execution metrics, block dependency analysis, and resource usage tracking with visualization dashboards",
        "acceptance_criteria": [
          "Task execution time and performance metrics",
          "Block dependency analysis and optimization suggestions",
          "Resource usage monitoring and alerts",
          "Performance dashboard with charts and graphs",
          "Historical performance data storage"
        ],
        "dependencies": [],
        "estimated_effort": "medium",
        "files_affected": [
          "src/analytics/",
          "src/metrics_collector.rs",
          "frontend/src/components/Analytics.jsx",
          "src/performance_monitor.rs"
        ],
        "function_signatures": [
          "collect_execution_metrics(task_id: String) -> Metrics",
          "analyze_dependencies(blocks: Vec<Block>) -> DependencyReport",
          "track_resource_usage() -> ResourceMetrics"
        ],
        "testing_requirements": [
          "Metrics collection accuracy tests",
          "Dependency analysis tests",
          "Resource monitoring tests",
          "Dashboard rendering tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "pRK6UT": {
        "task_id": "pRK6UT",
        "task_name": "Environment Management",
        "description": "Implement Docker integration for isolated execution, multiple environment configurations, and deployment pipeline automation",
        "acceptance_criteria": [
          "Docker containerization for block execution environments",
          "Multiple environment configuration management (dev, staging, prod)",
          "Deployment pipeline automation and orchestration",
          "Environment isolation and security",
          "Configuration synchronization across environments"
        ],
        "dependencies": [],
        "estimated_effort": "large",
        "files_affected": [
          "src/environments/",
          "docker/",
          "src/deployment/",
          "frontend/src/components/EnvironmentManager.jsx"
        ],
        "function_signatures": [
          "create_environment(config: EnvironmentConfig) -> Result<Environment>",
          "deploy_to_environment(blocks: Vec<Block>, env: Environment) -> Result<()>",
          "manage_containers(action: ContainerAction) -> Result<()>"
        ],
        "testing_requirements": [
          "Docker integration tests",
          "Environment configuration tests",
          "Deployment pipeline tests",
          "Container management tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "dpIUnY": {
        "task_id": "dpIUnY",
        "task_name": "Real-time Collaboration",
        "description": "Implement multi-user block editing with conflict resolution, live cursor tracking, change broadcasting, and team workspace management",
        "acceptance_criteria": [
          "Multiple users can edit blocks simultaneously",
          "Real-time conflict resolution for concurrent edits",
          "Live cursor tracking shows user positions",
          "Change broadcasting updates all connected clients",
          "Team workspace isolation and permissions"
        ],
        "dependencies": [],
        "estimated_effort": "large",
        "files_affected": [
          "src/collaboration/",
          "frontend/src/components/Collaboration.jsx",
          "src/websocket/collaboration.rs",
          "src/models/collaboration.rs"
        ],
        "function_signatures": [
          "start_collaboration_session(workspace_id: String) -> Result<SessionId>",
          "broadcast_change(session_id: SessionId, change: Change)",
          "resolve_conflict(change1: Change, change2: Change) -> Change"
        ],
        "testing_requirements": [
          "Multi-user simulation tests",
          "Conflict resolution algorithm tests",
          "WebSocket connection tests",
          "Workspace isolation tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "YOlTeA": {
        "task_id": "YOlTeA",
        "task_name": "Advanced Git Features",
        "description": "Implement visual merge conflict resolution, branch comparison for blocks, and automated PR generation from tasks",
        "acceptance_criteria": [
          "Visual merge conflict resolution interface",
          "Block-level branch comparison and diff visualization",
          "Automated pull request generation from completed tasks",
          "Git workflow integration with block development",
          "Advanced branching strategies support"
        ],
        "dependencies": [],
        "estimated_effort": "medium",
        "files_affected": [
          "src/git_advanced/",
          "frontend/src/components/GitAdvanced.jsx",
          "src/merge_resolver.rs",
          "src/pr_generator.rs"
        ],
        "function_signatures": [
          "resolve_merge_conflict(conflict: MergeConflict) -> Resolution",
          "compare_branches(branch1: &str, branch2: &str) -> BranchDiff",
          "generate_pr_from_tasks(tasks: Vec<Task>) -> PullRequest"
        ],
        "testing_requirements": [
          "Merge conflict resolution tests",
          "Branch comparison tests",
          "PR generation tests",
          "Git workflow integration tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "J0SCrV": {
        "task_id": "J0SCrV",
        "task_name": "Testing Framework Integration",
        "description": "Auto-generate test cases from acceptance criteria, implement visual test coverage mapping, and integrate with CI/CD pipelines",
        "acceptance_criteria": [
          "Test case generation from block acceptance criteria",
          "Visual test coverage mapping on block diagrams",
          "CI/CD pipeline integration and automation",
          "Test result visualization and reporting",
          "Support for multiple testing frameworks"
        ],
        "dependencies": [],
        "estimated_effort": "medium",
        "files_affected": [
          "src/testing/",
          "src/test_generator.rs",
          "frontend/src/components/TestCoverage.jsx",
          "src/ci_integration.rs"
        ],
        "function_signatures": [
          "generate_tests_from_criteria(criteria: Vec<String>) -> Vec<TestCase>",
          "calculate_coverage(tests: Vec<TestResult>) -> CoverageMap",
          "integrate_ci_pipeline(config: CIConfig) -> Result<()>"
        ],
        "testing_requirements": [
          "Test generation accuracy tests",
          "Coverage calculation tests",
          "CI/CD integration tests",
          "Multi-framework support tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "fotK1U": {
        "task_id": "fotK1U",
        "task_name": "AI-Powered Code Review",
        "description": "Implement automated code quality analysis, security vulnerability scanning, and performance optimization suggestions using AI integration",
        "acceptance_criteria": [
          "Automated code quality scoring and feedback",
          "Security vulnerability detection and reporting",
          "Performance bottleneck identification",
          "Actionable optimization suggestions",
          "Integration with existing LLM providers"
        ],
        "dependencies": [],
        "estimated_effort": "medium",
        "files_affected": [
          "src/code_review/",
          "src/security_scanner.rs",
          "src/performance_analyzer.rs",
          "frontend/src/components/CodeReview.jsx"
        ],
        "function_signatures": [
          "analyze_code_quality(code: &str) -> QualityReport",
          "scan_security_vulnerabilities(code: &str) -> Vec<Vulnerability>",
          "suggest_optimizations(code: &str) -> Vec<Optimization>"
        ],
        "testing_requirements": [
          "Code quality analysis accuracy tests",
          "Security scanning effectiveness tests",
          "Performance suggestion validation tests",
          "Integration tests with LLM providers"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "zdsxxM": {
        "task_id": "zdsxxM",
        "task_name": "Smart Autocomplete",
        "description": "Implement context-aware block suggestions, dependency recommendation engine, and pattern recognition for common architectures",
        "acceptance_criteria": [
          "Context-aware block suggestions based on current architecture",
          "Intelligent dependency recommendations",
          "Pattern recognition for common architectural patterns",
          "Learning from user behavior and preferences",
          "Integration with existing block creation workflow"
        ],
        "dependencies": [],
        "estimated_effort": "medium",
        "files_affected": [
          "src/autocomplete/",
          "src/pattern_recognition.rs",
          "frontend/src/components/SmartSuggestions.jsx",
          "src/recommendation_engine.rs"
        ],
        "function_signatures": [
          "suggest_blocks(context: BlockContext) -> Vec<BlockSuggestion>",
          "recommend_dependencies(block: &Block) -> Vec<String>",
          "recognize_patterns(architecture: &Architecture) -> Vec<Pattern>"
        ],
        "testing_requirements": [
          "Suggestion accuracy tests",
          "Dependency recommendation tests",
          "Pattern recognition tests",
          "User behavior learning tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "ckCbTh": {
        "task_id": "ckCbTh",
        "task_name": "Enhanced Visual Editor",
        "description": "Implement drag-and-drop component library, custom block templates, minimap for large architectures, and block grouping/nesting capabilities",
        "acceptance_criteria": [
          "Drag-and-drop component palette",
          "Custom block template creation and management",
          "Minimap navigation for large block diagrams",
          "Block grouping and hierarchical nesting",
          "Improved visual layout algorithms"
        ],
        "dependencies": [],
        "estimated_effort": "medium",
        "files_affected": [
          "frontend/src/components/VisualEditor/",
          "frontend/src/components/BlockPalette.jsx",
          "frontend/src/components/Minimap.jsx",
          "frontend/src/utils/layout.js"
        ],
        "function_signatures": [
          "createBlockTemplate(template: BlockTemplate) -> Result<String>",
          "groupBlocks(blockIds: Vec<String>) -> BlockGroup",
          "generateMinimap(blocks: Vec<Block>) -> MinimapData"
        ],
        "testing_requirements": [
          "Drag-and-drop interaction tests",
          "Template creation and validation tests",
          "Minimap rendering tests",
          "Block grouping functionality tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "D4CDBD": {
        "task_id": "D4CDBD",
        "task_name": "Plugin Ecosystem",
        "description": "Create third-party block marketplace, custom tool integration APIs, and extension development framework",
        "acceptance_criteria": [
          "Third-party block marketplace with search and discovery",
          "Custom tool integration API for external services",
          "Extension development framework with documentation",
          "Plugin sandboxing and security",
          "Plugin versioning and dependency management"
        ],
        "dependencies": [],
        "estimated_effort": "large",
        "files_affected": [
          "src/plugins/",
          "src/marketplace/",
          "frontend/src/components/Marketplace.jsx",
          "src/extension_api.rs"
        ],
        "function_signatures": [
          "load_plugin(plugin_path: &str) -> Result<Plugin>",
          "register_tool(tool: CustomTool) -> Result<()>",
          "publish_to_marketplace(block: Block) -> Result<String>"
        ],
        "testing_requirements": [
          "Plugin loading and execution tests",
          "Marketplace functionality tests",
          "Security sandboxing tests",
          "API integration tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "68X8Sg": {
        "task_id": "68X8Sg",
        "task_name": "Documentation Generator",
        "description": "Auto-generate API documentation from blocks, export architecture diagrams, and sync with markdown specifications",
        "acceptance_criteria": [
          "API documentation generation from block definitions",
          "Architecture diagram export in multiple formats",
          "Markdown specification synchronization",
          "Documentation versioning and history",
          "Custom documentation templates"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "src/documentation/",
          "src/diagram_exporter.rs",
          "frontend/src/components/DocGenerator.jsx",
          "templates/docs/"
        ],
        "function_signatures": [
          "generate_api_docs(blocks: Vec<Block>) -> Documentation",
          "export_diagram(format: ExportFormat) -> Result<Vec<u8>>",
          "sync_markdown_spec(spec: &str) -> Result<()>"
        ],
        "testing_requirements": [
          "Documentation generation tests",
          "Diagram export format tests",
          "Markdown sync accuracy tests",
          "Template rendering tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "e9b19b": {
        "task_id": "e9b19b",
        "task_name": "Multi-Language Code Generation",
        "description": "Implement auto-generation of boilerplate code from block specifications with support for multiple frameworks (React, FastAPI, Express, etc.) and a template system for different project types",
        "acceptance_criteria": [
          "Code templates can be generated from block descriptions",
          "Support for React, FastAPI, Express, and other popular frameworks",
          "Template system allows custom project scaffolding",
          "Generated code follows framework best practices",
          "Integration with existing block architecture"
        ],
        "dependencies": [],
        "estimated_effort": "large",
        "files_affected": [
          "src/code_generator.rs",
          "src/templates/",
          "frontend/src/components/CodeGeneration.jsx",
          "src/mcp/tools/codegen.rs"
        ],
        "function_signatures": [
          "generate_code_from_block(block: &Block, framework: &str) -> Result<String>",
          "load_template(template_name: &str) -> Result<Template>",
          "apply_template(template: Template, context: Context) -> String"
        ],
        "testing_requirements": [
          "Unit tests for code generation functions",
          "Integration tests with different frameworks",
          "Template validation tests",
          "End-to-end tests for code generation workflow"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "JdotCA": {
        "task_id": "JdotCA",
        "task_name": "Advanced Debugging Tools",
        "description": "Implement visual execution flow debugging, breakpoint management across blocks, and runtime variable inspection capabilities",
        "acceptance_criteria": [
          "Visual execution flow with step-through debugging",
          "Breakpoint setting and management across blocks",
          "Runtime variable inspection and modification",
          "Call stack visualization",
          "Debug session persistence"
        ],
        "dependencies": [],
        "estimated_effort": "large",
        "files_affected": [
          "src/debugger/",
          "frontend/src/components/Debugger.jsx",
          "src/execution_tracer.rs",
          "src/breakpoint_manager.rs"
        ],
        "function_signatures": [
          "start_debug_session(block_id: String) -> DebugSession",
          "set_breakpoint(location: CodeLocation) -> Result<()>",
          "inspect_variable(name: &str) -> Variable"
        ],
        "testing_requirements": [
          "Debug session lifecycle tests",
          "Breakpoint functionality tests",
          "Variable inspection accuracy tests",
          "Multi-block debugging tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      }
    }
  },
  {
    "name": "IO and connection UI Fix",
    "block_id": "S9fPOY",
    "description": "In Block card, if Inputs and Outputs are empty - Dont show the  \"Inputs & Outputs\" section, Same for \"Connections\" section",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "3EsF9M": {
        "task_id": "3EsF9M",
        "task_name": "Add conditional rendering logic for Connections section",
        "description": "Implement conditional rendering in the Block card component to hide the \"Connections\" section when the connections array is empty. This involves checking if the connections data structure is empty or undefined and conditionally rendering the section based on this check.",
        "acceptance_criteria": [
          "Block card hides 'Connections' section when connections array is empty",
          "Block card shows 'Connections' section when at least one connection exists",
          "UI layout adjusts properly when section is hidden/shown",
          "No visual artifacts or spacing issues when section is hidden",
          "Handles undefined connections gracefully"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "frontend/src/components/BlockCard.jsx",
          "frontend/src/components/BlockCard.css"
        ],
        "function_signatures": [
          "const hasConnections = (connections) => boolean",
          "const renderConnectionsSection = (connections) => JSX.Element | null"
        ],
        "testing_requirements": [
          "Unit tests for hasConnections helper function",
          "Component tests for conditional rendering with empty connections",
          "Component tests for conditional rendering with populated connections",
          "Component tests for handling undefined connections",
          "Visual regression tests for layout changes"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "1VaCga": {
        "task_id": "1VaCga",
        "task_name": "Add conditional rendering logic for Inputs & Outputs section",
        "description": "Implement conditional rendering in the Block card component to hide the \"Inputs & Outputs\" section when both inputs and outputs arrays are empty. This involves checking if the inputs and outputs data structures are empty and conditionally rendering the section based on this check.",
        "acceptance_criteria": [
          "Block card hides 'Inputs & Outputs' section when both inputs and outputs are empty arrays",
          "Block card shows 'Inputs & Outputs' section when at least one input or output exists",
          "UI layout adjusts properly when section is hidden/shown",
          "No visual artifacts or spacing issues when section is hidden"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "frontend/src/components/BlockCard.jsx",
          "frontend/src/components/BlockCard.css"
        ],
        "function_signatures": [
          "const hasInputsOrOutputs = (inputs, outputs) => boolean",
          "const renderInputsOutputsSection = (inputs, outputs) => JSX.Element | null"
        ],
        "testing_requirements": [
          "Unit tests for hasInputsOrOutputs helper function",
          "Component tests for conditional rendering with empty inputs/outputs",
          "Component tests for conditional rendering with populated inputs/outputs",
          "Visual regression tests for layout changes"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "YFjZ5G": {
        "task_id": "YFjZ5G",
        "task_name": "Update Block card styling for dynamic sections",
        "description": "Update CSS styles for the Block card component to ensure proper spacing and layout when sections are conditionally hidden. This includes adjusting margins, padding, and flex properties to maintain visual consistency regardless of which sections are visible. [COMPLETED]",
        "acceptance_criteria": [
          "Block card maintains consistent spacing when sections are hidden",
          "No orphaned margins or padding when sections are removed",
          "Card height adjusts smoothly based on visible content",
          "Consistent visual hierarchy is maintained",
          "Responsive design works across different screen sizes"
        ],
        "dependencies": [
          "1VaCga",
          "3EsF9M"
        ],
        "estimated_effort": "small",
        "files_affected": [
          "frontend/src/components/BlockCard.css",
          "frontend/src/components/BlockCard.scss"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Visual regression tests for various section combinations",
          "Responsive design tests on different screen sizes",
          "Cross-browser compatibility tests",
          "Accessibility tests for layout changes"
        ],
        "log": "Step 1: Pulling latest main branch YFjZ5G\nStep 2: Creating task-specific branch using task ID YFjZ5G\nStep 3: Executing task YFjZ5G\n",
        "commit_id": "60efe5aa1fd3525f61af153293e3c4e5f0a9cff0",
        "status": "[COMPLETED]"
      }
    }
  },
  {
    "name": "Update task check",
    "block_id": "fIRVK5",
    "description": "Check update_task mcp tool works ",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "rDL6j3": {
        "task_id": "rDL6j3",
        "task_name": "Create end-to-end workflow tests for update_task",
        "description": "Develop comprehensive end-to-end workflow tests that simulate real-world usage patterns of the update_task MCP tool including complete task lifecycle management, multiple sequential updates, and integration with other MCP tools like create_task and exec_task.",
        "acceptance_criteria": [
          "Complete task lifecycle (create -> update -> complete) works",
          "Multiple sequential updates maintain data integrity",
          "Integration with create_task tool functions properly",
          "Integration with exec_task tool works correctly",
          "Workflow handles interruptions gracefully",
          "Task history is properly maintained",
          "Complex multi-field updates work correctly",
          "Workflow performance is acceptable"
        ],
        "dependencies": [
          "RF2O0c",
          "ebktC6"
        ],
        "estimated_effort": "large",
        "files_affected": [
          "tests/integration/update_task_workflow_test.rs",
          "tests/e2e/task_lifecycle_test.rs"
        ],
        "function_signatures": [
          "fn test_complete_task_lifecycle()",
          "fn test_sequential_updates()",
          "fn test_mcp_tool_integration()"
        ],
        "testing_requirements": [
          "End-to-end workflow tests",
          "Integration tests with other MCP tools",
          "Task lifecycle validation",
          "Multi-step scenario testing",
          "Real-world usage simulation"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "RF2O0c": {
        "task_id": "RF2O0c",
        "task_name": "Test update_task with valid task update scenarios",
        "description": "Create comprehensive tests for the update_task MCP tool using valid task update scenarios including status changes, description updates, adding acceptance criteria, updating dependencies, and modifying effort estimates. Verify that all updates are correctly applied and persisted.",
        "acceptance_criteria": [
          "Status updates (TODO -> IN_PROGRESS -> COMPLETED) work correctly",
          "Description updates are properly saved",
          "Acceptance criteria can be added, modified, and removed",
          "Dependencies can be updated with valid task IDs",
          "Effort estimation updates are correctly applied",
          "All updates are persisted to storage",
          "Updated task data is returned in response"
        ],
        "dependencies": [
          "z1nx5n"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "tests/mcp/update_task_test.rs",
          "src/mcp/tools/update_task.rs"
        ],
        "function_signatures": [
          "fn test_update_task_status()",
          "fn test_update_task_description()",
          "fn test_update_task_acceptance_criteria()"
        ],
        "testing_requirements": [
          "Unit tests for each update field",
          "Integration tests with real database",
          "Verification of data persistence",
          "Response validation tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "z1nx5n": {
        "task_id": "z1nx5n",
        "task_name": "Verify update_task MCP tool function signature and parameters",
        "description": "Examine the update_task MCP tool implementation to verify its function signature, required parameters, optional parameters, and return values. Document the current behavior and identify any issues with parameter handling or validation.",
        "acceptance_criteria": [
          "Function signature is documented and matches implementation",
          "All required parameters are properly validated",
          "Optional parameters have appropriate default values",
          "Return values are consistent and well-defined",
          "Parameter types are correctly enforced"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "src/mcp/tools/mod.rs",
          "src/mcp/tools/update_task.rs"
        ],
        "function_signatures": [
          "pub fn update_task(block_id: String, task_id: String, updates: TaskUpdate) -> Result<TaskResponse, McpError>"
        ],
        "testing_requirements": [
          "Manual inspection of function signature",
          "Parameter validation testing",
          "Documentation review"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "8GssNn": {
        "task_id": "8GssNn",
        "task_name": "Validate update_task integration with MCP protocol",
        "description": "Test the update_task MCP tool's integration with the MCP protocol to ensure it correctly handles MCP requests, follows protocol specifications, and integrates properly with the MCP server infrastructure. Verify request/response format compliance and protocol adherence.",
        "acceptance_criteria": [
          "MCP request format is correctly parsed",
          "MCP response format adheres to protocol",
          "Tool registration works correctly",
          "Protocol version compatibility is maintained",
          "Request routing functions properly",
          "Response serialization is valid",
          "Integration with MCP server is seamless"
        ],
        "dependencies": [
          "z1nx5n"
        ],
        "estimated_effort": "small",
        "files_affected": [
          "tests/mcp/protocol_integration_test.rs",
          "src/mcp/server.rs",
          "src/mcp/tools/update_task.rs"
        ],
        "function_signatures": [
          "fn test_mcp_update_task_request_parsing()",
          "fn test_mcp_update_task_response_format()",
          "fn test_mcp_tool_registration()"
        ],
        "testing_requirements": [
          "MCP protocol compliance tests",
          "Request/response format validation",
          "Integration tests with MCP server",
          "Protocol version compatibility tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "KAyZx1": {
        "task_id": "KAyZx1",
        "task_name": "Document update_task testing results and create test report",
        "description": "Compile comprehensive documentation of all update_task MCP tool testing results including test coverage analysis, performance benchmarks, identified issues, recommendations for improvements, and a final validation report confirming the tool's functionality and reliability.",
        "acceptance_criteria": [
          "Test coverage report shows >90% coverage",
          "All test results are documented with pass/fail status",
          "Performance benchmarks are recorded and analyzed",
          "Identified issues are documented with severity levels",
          "Recommendations for improvements are provided",
          "Final validation report confirms tool reliability",
          "Documentation is well-structured and comprehensive",
          "Testing methodology is clearly explained"
        ],
        "dependencies": [
          "RF2O0c",
          "rMAoT2",
          "8GssNn",
          "r4Vm82",
          "ebktC6",
          "WqHLM5",
          "rDL6j3"
        ],
        "estimated_effort": "small",
        "files_affected": [
          "docs/testing/update_task_test_report.md",
          "docs/testing/test_coverage_analysis.md"
        ],
        "function_signatures": [
          "fn generate_test_coverage_report()",
          "fn compile_performance_benchmarks()"
        ],
        "testing_requirements": [
          "Test coverage analysis",
          "Results compilation and documentation",
          "Performance metrics analysis",
          "Final validation report generation"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "WqHLM5": {
        "task_id": "WqHLM5",
        "task_name": "Test update_task field-specific validations",
        "description": "Create comprehensive tests for field-specific validations in the update_task MCP tool including task name length limits, description format validation, status value constraints, dependency ID validation, effort estimation formats, and acceptance criteria structure validation.",
        "acceptance_criteria": [
          "Task name length limits are enforced",
          "Status values are restricted to valid enum values",
          "Dependency IDs are validated for existence",
          "Effort estimation accepts only valid formats",
          "Acceptance criteria array validation works",
          "Testing requirements format is validated",
          "Function signatures syntax is checked",
          "Files affected paths are validated"
        ],
        "dependencies": [
          "z1nx5n"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "tests/mcp/field_validation_test.rs",
          "src/mcp/tools/update_task.rs",
          "src/models/task.rs"
        ],
        "function_signatures": [
          "fn test_task_name_validation()",
          "fn test_status_validation()",
          "fn test_dependency_validation()",
          "fn test_effort_validation()"
        ],
        "testing_requirements": [
          "Field-specific validation tests",
          "Boundary value testing",
          "Input format validation",
          "Constraint enforcement tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "ebktC6": {
        "task_id": "ebktC6",
        "task_name": "Verify update_task data persistence and consistency",
        "description": "Test the update_task MCP tool's data persistence mechanisms to ensure all updates are correctly saved to storage and maintain data consistency across different scenarios including system restarts, transaction rollbacks, and partial update failures.",
        "acceptance_criteria": [
          "All task updates are persisted to database",
          "Data remains consistent after system restart",
          "Partial update failures are rolled back correctly",
          "Transaction integrity is maintained",
          "No data loss occurs during concurrent updates",
          "Database constraints are properly enforced",
          "Data consistency is verified across multiple reads"
        ],
        "dependencies": [
          "RF2O0c"
        ],
        "estimated_effort": "small",
        "files_affected": [
          "tests/mcp/persistence_test.rs",
          "src/storage/task_storage.rs"
        ],
        "function_signatures": [
          "fn test_update_task_persistence()",
          "fn test_transaction_rollback()",
          "fn test_data_consistency()"
        ],
        "testing_requirements": [
          "Database persistence tests",
          "Transaction rollback tests",
          "Data consistency verification",
          "System restart recovery tests"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "r4Vm82": {
        "task_id": "r4Vm82",
        "task_name": "Test update_task performance and scalability",
        "description": "Conduct performance testing of the update_task MCP tool to evaluate its behavior under load, measure response times, and identify potential bottlenecks. Test with large numbers of concurrent updates, large task datasets, and complex update operations.",
        "acceptance_criteria": [
          "Response time under 200ms for typical updates",
          "Handles 100+ concurrent update requests",
          "Performance scales linearly with task count",
          "Memory usage remains stable during load",
          "No degradation with large task descriptions",
          "Database connection pooling works efficiently",
          "Benchmark results are documented"
        ],
        "dependencies": [
          "RF2O0c",
          "rMAoT2"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "tests/performance/update_task_perf_test.rs",
          "benches/update_task_bench.rs"
        ],
        "function_signatures": [
          "fn benchmark_update_task_performance()",
          "fn test_concurrent_updates()",
          "fn test_large_dataset_updates()"
        ],
        "testing_requirements": [
          "Load testing with concurrent requests",
          "Performance benchmarks",
          "Memory usage profiling",
          "Response time measurements",
          "Scalability testing"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      },
      "rMAoT2": {
        "task_id": "rMAoT2",
        "task_name": "Test update_task error handling and edge cases",
        "description": "Create comprehensive tests for error scenarios and edge cases in the update_task MCP tool including invalid block_id, non-existent task_id, invalid status transitions, malformed parameters, and concurrent update conflicts. Ensure proper error messages and handling.",
        "acceptance_criteria": [
          "Invalid block_id returns appropriate error",
          "Non-existent task_id returns not found error",
          "Invalid status values are rejected",
          "Malformed parameters trigger validation errors",
          "Concurrent updates are handled gracefully",
          "Error messages are clear and actionable",
          "No data corruption occurs on failures"
        ],
        "dependencies": [
          "z1nx5n"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "tests/mcp/update_task_error_test.rs",
          "src/mcp/tools/update_task.rs"
        ],
        "function_signatures": [
          "fn test_update_task_invalid_block_id()",
          "fn test_update_task_nonexistent_task()",
          "fn test_update_task_invalid_status()"
        ],
        "testing_requirements": [
          "Error case unit tests",
          "Edge case integration tests",
          "Concurrent access testing",
          "Error message validation",
          "Data integrity verification"
        ],
        "log": "",
        "commit_id": "",
        "status": "TODO"
      }
    }
  },
  {
    "name": "MCP Tools testing",
    "block_id": "mdvgei",
    "description": "create tests for all (forge) MCP tools",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Failed to send \"claude\" stream from backend to frontend using websocket,  ",
    "block_id": "NFrFA3",
    "description": "2025-06-29T10:17:44.523680Z  WARN forge::claude_handlers: Failed to send PTY output to broadcast channel: channel closed\n",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Terminal vertical scrollbar bug",
    "block_id": "eB2lPF",
    "description": "During websocket streaming content to terminal - the terminal printing and the scroll jumps to the beginning (top). \nWhen I am scrolling down - the terminal responds correctly and scrolls down for few seconds and then the Terminal jumps up again.",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "cZKw0y": {
        "task_id": "cZKw0y",
        "task_name": "Implement Smart Auto-Scroll Detection",
        "description": "Create logic to detect when user wants auto-scrolling (at bottom of terminal) vs manual scrolling (anywhere else). Only auto-scroll to bottom when user is already at the bottom position.",
        "acceptance_criteria": [
          "Auto-scroll only occurs when user is at bottom of terminal",
          "Manual scroll positions are preserved during content updates",
          "Smooth transition between auto-scroll and manual scroll modes",
          "User intent is correctly detected based on scroll position"
        ],
        "dependencies": [
          "aKgvTV"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "src/components/Terminal.tsx",
          "src/hooks/useAutoScroll.ts",
          "src/utils/scrollUtils.ts"
        ],
        "function_signatures": [
          "const useAutoScroll = (containerRef: RefObject<HTMLElement>) => { isAtBottom: boolean, shouldAutoScroll: boolean, scrollToBottom: () => void }",
          "const isScrolledToBottom = (element: HTMLElement, threshold?: number) => boolean"
        ],
        "testing_requirements": [
          "Unit tests for auto-scroll detection logic",
          "Manual testing of scroll behavior at different positions",
          "Edge case testing for rapid content updates"
        ],
        "log": "",
        "commit_id": "",
        "status": "[IN-PROGRESS]"
      },
      "aKgvTV": {
        "task_id": "aKgvTV",
        "task_name": "Investigate Terminal Scroll State Management",
        "description": "Analyze the current terminal component's scroll state management to understand why auto-scrolling to top occurs during websocket streaming. Identify the root cause of unwanted scroll position resets.",
        "acceptance_criteria": [
          "Document current scroll behavior and state management approach",
          "Identify specific code locations causing scroll jumps",
          "Map websocket event handlers that trigger scroll resets",
          "Create reproduction steps for the scroll jumping issue"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "src/components/Terminal.tsx",
          "src/hooks/useWebSocket.ts",
          "src/utils/scrollUtils.ts"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Manual testing to reproduce scroll jumping behavior",
          "Document specific scenarios where scroll position resets occur"
        ],
        "log": "",
        "commit_id": "",
        "status": "[IN-PROGRESS]"
      },
      "yy8MHK": {
        "task_id": "yy8MHK",
        "task_name": "Implement Scroll Position Preservation Logic",
        "description": "Create a robust scroll position preservation system that maintains the user's current scroll position during websocket content updates. Implement scroll state tracking and restoration mechanisms.",
        "acceptance_criteria": [
          "Scroll position is preserved when new content arrives via websocket",
          "User scroll actions are not interrupted by content updates",
          "Scroll state is properly tracked and restored after DOM updates",
          "Performance impact is minimal during high-frequency updates"
        ],
        "dependencies": [
          "aKgvTV"
        ],
        "estimated_effort": "medium",
        "files_affected": [
          "src/components/Terminal.tsx",
          "src/hooks/useScrollPreservation.ts",
          "src/utils/scrollUtils.ts"
        ],
        "function_signatures": [
          "const useScrollPreservation = (containerRef: RefObject<HTMLElement>) => { scrollTop: number, preserveScroll: () => void, restoreScroll: () => void }",
          "const preserveScrollPosition = (element: HTMLElement, callback: () => void) => void"
        ],
        "testing_requirements": [
          "Unit tests for scroll preservation hooks",
          "Integration tests for websocket content updates",
          "Manual testing with various scroll positions during streaming"
        ],
        "log": "",
        "commit_id": "",
        "status": "[IN-PROGRESS]"
      }
    }
  },
  {
    "name": "Record tasks",
    "block_id": "AGutOj",
    "description": "I want to record websocket stream for each executed task, clear the websocket stream and the Terminal and record the websocket stream to a file in ./logs/[block_id]/tatsk_id]. When the user presses the Logs button on  a single selected task open a Logs popup dialog and Show the log. use a xterm.js in the  popup dialog to show the logs with ascii colors - same configuration as current Terminal.jsx xterm.js  ",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Add \\r to tx.send",
    "block_id": "LEShjA",
    "description": "When sending prompt to websocket - add '\\r' to send call - for example tx.send( format!( \"{}\\r\", prompt))",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "37WvYa": {
        "task_id": "37WvYa",
        "task_name": "Identify WebSocket Prompt Sending Code",
        "description": "Locate all instances in the codebase where prompts are sent through WebSocket connections to understand the current implementation and identify where '\\r' needs to be added. \n\nCOMPLETED: Successfully identified and updated all WebSocket prompt sending locations:\n1. /Users/dovcaspi/develop/forge/src/claude_handlers.rs - Lines 130, 159 (updated tx.send calls to add \\r)\n2. /Users/dovcaspi/develop/forge/src/task_executor.rs - Line 888 (updated tx.send call to add \\r)  \n3. /Users/dovcaspi/develop/forge/src/llm_handler.rs - Lines 666, 742 (updated tx.send calls to add \\r)\n4. /Users/dovcaspi/develop/forge/src/mcp/tools/tasks.rs - Line 1006 (updated tx.send call to add \\r)\n\nAll WebSocket prompt sending locations now use format!(\"{}\\r\", prompt) to properly add carriage return for PTY terminal interaction.",
        "acceptance_criteria": [
          "All WebSocket prompt sending locations are identified",
          "Current tx.send() calls with prompts are documented",
          "Code patterns for prompt transmission are understood"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "src/**/*.rs",
          "src/**/*.js",
          "src/**/*.ts"
        ],
        "function_signatures": [],
        "testing_requirements": [
          "Code review to ensure all locations are found"
        ],
        "log": "",
        "commit_id": "fb12fe0ad8b4c33455367dee53b74d25f3ea3034",
        "status": "COMPLETED"
      }
    }
  },
  {
    "name": "Parallel execution",
    "block_id": "dLcxFM",
    "description": "All the following functions should be able to be executed in parallel:\n1. To generate block Task\n2. Run Tasks\n3. Create Tasks",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "Block with Empty Tasks",
    "block_id": "qfXob8",
    "description": "If a Block has empty tasks and the user presses execute - Show popup - \"No Tasks - Should I first generate the tasks ? Yes/No\" . If the user chooses \"Yes\" start generating tasks as if the user pressed the \"Generate Tasks button\", If the user chooses \"No\" remove the popup and do nothing.",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {}
  },
  {
    "name": "test",
    "block_id": "QYeewg",
    "description": "Just a simple test",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "F2uton": {
        "task_id": "F2uton",
        "task_name": "Create Basic Test Structure",
        "description": "Set up the fundamental test structure and configuration for the simple test component. This includes creating the test files, setting up test dependencies, and establishing the basic test framework.",
        "acceptance_criteria": [
          "Test directory structure is created",
          "Test configuration files are properly set up",
          "Basic test runner can execute without errors",
          "Test dependencies are installed and configured"
        ],
        "dependencies": [],
        "estimated_effort": "small",
        "files_affected": [
          "tests/simple_test.rs",
          "Cargo.toml",
          "tests/mod.rs"
        ],
        "function_signatures": [
          "#[cfg(test)] mod tests",
          "#[test] fn test_setup()"
        ],
        "testing_requirements": [
          "Verify test structure compiles",
          "Ensure test runner can discover tests",
          "Validate test configuration"
        ],
        "log": "",
        "commit_id": "",
        "status": "[IN-PROGRESS]"
      }
    }
  },
  {
    "name": "get_source_files_list",
    "block_id": "ib8BEd",
    "description": "convert \"get_source_files_list\" function to \"get_source_ext_list\" , this will return only relevant extensions and not all source files as part of the prompt (variable \"mcp_prompt\" in function \"execute_git_tasks_mcp\"), file task_executor.rs",
    "inputs": [],
    "outputs": [],
    "connections": {
      "input_connections": [],
      "output_connections": []
    },
    "todo_list": {
      "ii8bmz": {
        "task_id": "ii8bmz",
        "task_name": "convert \"get_source_files_list\"",
        "description": "convert \"get_source_files_list\" function to \"get_source_ext_list\" , this will return only relevant extensions and not all source files as part of the prompt (variable \"mcp_prompt\" in function \"execute_git_tasks_mcp\"), file task_executor.rs",
        "acceptance_criteria": [],
        "dependencies": [],
        "estimated_effort": "",
        "files_affected": [],
        "function_signatures": [],
        "testing_requirements": [],
        "log": "",
        "commit_id": "",
        "status": "[IN-PROGRESS]"
      }
    }
  }
]