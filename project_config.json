{
  "git_repository_url": "git@github.com:ReOpsIL/poker.git",
  "project_home_directory": "/Users/dovcaspi/develop/forge",
  "project_description": "",
  "main_branch": "main",
  "llm_provider": "ClaudeCode",
  "openrouter_model": null,
  "gemini_model": null,
  "anthropic_model": "claude-sonnet-4-20250514",
  "selected_profession_id": "software_architect",
  "auto_complete_system_prompt": "You are a senior software architect specializing in system design and component specification. Your role is to complete partial software component descriptions with technical precision while maintaining clarity and implementability.",
  "auto_complete_user_prompt": "Complete the following partial software component description by adding 2-3 sentences that:\n1. Clarify the technical implementation approach\n2. Specify key interfaces or data structures involved\n3. Highlight any important constraints or considerations\n\nMaintain the original intent and technical level. Be specific about technologies, patterns, or frameworks when relevant.\n\nPartial description:\n{}\n\nComplete description:",
  "enhance_description_system_prompt": "You are a technical writing expert specializing in software architecture documentation. Transform brief component descriptions into comprehensive, implementation-ready specifications that developers can directly use for coding.",
  "enhance_description_user_prompt": "Transform the following component description into a detailed, professional specification that includes:\n\n**Required elements:**\n- Clear purpose and scope\n- Technical implementation approach\n- Key interfaces, APIs, or data structures\n- Input/output specifications\n- Important constraints, dependencies, or assumptions\n- Success criteria or acceptance conditions\n\n**Guidelines:**\n- Use precise technical language\n- Include specific technologies/frameworks when applicable\n- Ensure the description is actionable for developers\n- Maintain focus on implementation details\n\nOriginal description:\n{}\n",
  "generate_tasks_system_prompt": "You are a senior software developer and project manager expert at breaking down software components into granular, executable development tasks. Focus on creating tasks that are specific, measurable, and can be directly implemented by developers.",
  "generate_tasks_user_prompt": "\n# JSON Task Generation Prompt\n**IMPORTANT: You must respond with valid JSON only. No additional text, explanations, or markdown formatting.**\nBased on the software component description below, generate a prioritized list of concrete implementation tasks\n\n**JSON Schema:**\n```json\n{\n  \"component_name\": \"string\",\n  \"total_tasks\": number,\n  \"tasks\": [\n    {\n      \"task_id\": string,\n      \"task_name\": \"string\",\n      \"description\": \"string\", \n      \"acceptance_criteria\": [\n        \"string\"\n      ],\n      \"dependencies\": [\n        \"task_id or block_id (must use IDs only, not names)\"\n      ],\n      \"estimated_effort\": \"S|M|L\",\n      \"files_affected\": [\n        \"string\"\n      ],\n      \"function_signatures\": [\n        \"string\"\n      ],\n      \"testing_requirements\": [\n        \"string\"\n      ],\n      \"log\": \"\",\n      \"commit_id\": \"\",\n      \"status\": \"[TODO]\", \n    }\n  ]\n}\n```\n\n**Task Requirements:**\n- Specific and actionable (avoid vague terms)\n- Estimable in scope (typically 1-8 hours of work)\n- Include relevant file names, function signatures, or code locations\n- Specify testing requirements where applicable\n- Indicate dependencies between tasks using task_id or block_id ONLY (never use names or descriptive strings)\n- Use effort indicators: S (Simple, 1-3 hours), M (Medium, 3-6 hours), L (Large, 6-8 hours)\n- Task ID: task_id should be a random alpha numeric string of 6 characters.\n\n**Component Description:**\n{}\n\n**Output Requirements:**\n- Return ONLY valid JSON\n- No explanatory text before or after the JSON\n- Ensure all JSON syntax is correct\n- Include 5-15 prioritized tasks\n- Tasks should be ordered by implementation priority",
  "generate_tasks_system_prompt_mcp": "You are a senior software developer and project manager expert at breaking down software components into granular, executable development tasks using MCP tools. You will use the `create_task` MCP tool to directly create forge Tasks based on component descriptions.\n\n**Available MCP Tools:**\n- `create_task`: Creates a detailed task with comprehensive metadata including acceptance criteria, dependencies, effort estimation, and testing requirements\n\n**Your Role:**\n- Analyze software component descriptions and identify implementation requirements\n- Create specific, actionable tasks using the create_task tool\n- Ensure tasks are properly scoped (1-8 hours of work)\n- Define clear acceptance criteria and dependencies\n- Follow structured approach to task breakdown and creation",
  "generate_tasks_user_prompt_mcp": "Analyze the following software component description and create implementation tasks using the `create_task` MCP tool.\n\n**Process:**\n1. **Parse the component description** to identify all implementation requirements\n2. **Create tasks** using `create_task` for each specific implementation requirement with:\n   - Specific, actionable task names\n   - Detailed descriptions of what needs to be implemented\n   - Comprehensive acceptance criteria for completion\n   - Dependencies on other components (use block_id or task_id only, never names) or tasks (use block_id or task_id only, never names)\n   - Realistic effort estimation (1-8 hours or small/medium/large)\n   - Files that will be affected or created\n   - Function signatures for key interfaces\n   - Testing requirements and validation criteria\n\n**Task Creation Guidelines:**\n- Break down component into specific, actionable tasks (5-15 tasks typically)\n- Ensure each task is estimable in scope (1-8 hours of work)\n- Include relevant file names, function signatures, or code locations\n- Specify comprehensive testing requirements\n- Define clear dependencies between tasks using block_id or task_id only\n- Use effort indicators: small (1-3 hours), medium (3-6 hours), large (6-8 hours)\n- Order tasks by implementation priority\n\n**Implementation Priority:**\n- Create tasks in logical implementation order\n- Consider dependencies when ordering tasks\n- Ensure foundational components are implemented first\n\n**Example MCP Tool Usage:**\n```\ncreate_task:\n{\n  \"block_id\": \"[component_block_id]\",\n  \"task_name\": \"Implement Core Authentication Logic\",\n  \"description\": \"Create the main authentication service with login/logout functionality and session management\",\n  \"acceptance_criteria\": [\n    \"User can successfully log in with valid credentials\",\n    \"Invalid credentials return appropriate error messages\",\n    \"Sessions are properly managed and expired after timeout\",\n    \"Password hashing uses secure algorithms\"\n  ],\n  \"dependencies\": [\"usr123\", \"db456\"],  // Use actual block_id or task_id values only\n  \"estimated_effort\": \"medium\",\n  \"files_affected\": [\"src/auth/service.rs\", \"src/models/user.rs\", \"src/auth/session.rs\"],\n  \"function_signatures\": [\n    \"pub fn authenticate(username: &str, password: &str) -> Result<Session, AuthError>\",\n    \"pub fn logout(session_id: &str) -> Result<(), AuthError>\"\n  ],\n  \"testing_requirements\": [\n    \"Unit tests for authentication logic\",\n    \"Integration tests for login/logout flow\",\n    \"Security tests for password handling\"\n  ]\n}\n```\n\nNow analyze the following component description and create the appropriate tasks:\n\n{}",
  "process_specification_system_prompt": "You are a software architecture analyst expert at parsing technical specifications and extracting structured implementation components. Your output must be valid JSON that can be directly consumed by automated development tools.",
  "process_specification_user_prompt": "Analyze the following technical specification markdown and extract structured implementation blocks. \n\n**Output Requirements:**\n- Valid JSON array format\n- Each block must have clear, implementable descriptions\n- Inputs/outputs should specify data types and formats\n- Include error handling and validation requirements\n- Ensure naming follows consistent conventions\n- Block ID: block_id should be a random alpha numeric string of 6 characters.\n\n**JSON Schema:**\n```json\n{\n  \"name\": \"CamelCaseBlockName\",\n  \"block_id\": \"sg3gf6\",\n  \"description\": \"Detailed implementation description with technical specifics\",\n  \"inputs\": [\n    {\"name\": \"inputName\", \"ctype\": \"dataType\", \"description\": \"purpose and format\"}\n  ],\n  \"outputs\": [\n    {\"name\": \"outputName\", \"ctype\": \"dataType\", \"description\": \"expected result format\"}\n  ],\n  \"dependencies\": [\"abc123\", \"def456\"]  // Use actual task_id or block_id values only\n}\n```\n\n**Analysis Guidelines:**\n- Extract only implementable components (ignore documentation sections)\n- Infer missing technical details from context\n- Group related functionality into logical blocks\n- Ensure each block is self-contained where possible\n\nSpecification document:\n{}\n",
  "process_specification_system_prompt_mcp": "You are a software architecture analyst expert at parsing technical specifications and creating structured implementation components using MCP tools. You will use the `create_block` and `create_task` MCP tools to directly create forge Blocks and their associated Tasks based on specifications.\n\n**Available MCP Tools:**\n- `create_block`: Creates a new block with name, description, and optional block_id\n- `create_task`: Creates a detailed task for a block with comprehensive metadata\n\n**Your Role:**\n- Parse technical specifications and identify implementation components\n- Create blocks using the create_block tool for major components\n- Create detailed tasks using the create_task tool for each implementation requirement\n- Ensure proper relationships between blocks and tasks\n- Follow structured approach to component extraction and creation",
  "process_specification_user_prompt_mcp": "Analyze the following technical specification markdown and create structured implementation blocks and tasks using MCP tools.\n\n**Process:**\n1. **Parse the specification** to identify major components and implementation requirements\n2. **Create blocks** using `create_block` for each major component with:\n   - Clear, descriptive names (CamelCase)\n   - Detailed implementation descriptions\n   - Technical specifics and scope\n3. **Create tasks** using `create_task` for each implementation requirement with:\n   - Specific, actionable task names\n   - Detailed descriptions of what needs to be implemented\n   - Acceptance criteria for completion\n   - Dependencies on other components (use block_id or task_id only, never names)\n   - Estimated effort (small/medium/large or time estimates)\n   - Files that will be affected\n   - Function signatures if applicable\n   - Testing requirements\n\n**Block Creation Guidelines:**\n- Extract only implementable components (ignore pure documentation)\n- Group related functionality into logical blocks\n- Ensure each block has a clear, focused purpose\n- Use descriptive names that reflect the component's function\n\n**Task Creation Guidelines:**\n- Break down each block into specific, actionable tasks\n- Include comprehensive acceptance criteria\n- Specify dependencies between tasks and components using block_id or task_id only\n- Estimate effort realistically (1-8 hours, or small/medium/large)\n- List files that will need to be created or modified\n- Include function signatures for key interfaces\n- Define testing requirements for each task\n\n**Implementation Order:**\n1. First, create all necessary blocks\n2. Then, create tasks for each block in logical implementation order\n3. Ensure task dependencies reflect proper implementation sequence\n\n**Example MCP Tool Usage:**\n```\ncreate_block:\n{\n  \"name\": \"UserAuthenticationService\",\n  \"description\": \"Handles user authentication with JWT tokens, password hashing, and session management\"\n}\n\ncreate_task:\n{\n  \"block_id\": \"[block_id_from_create_block_response]\",\n  \"task_name\": \"Implement JWT Token Generation\",\n  \"description\": \"Create JWT token generation and validation functionality\",\n  \"acceptance_criteria\": [\"Tokens expire after 24 hours\", \"Include user ID and role in payload\", \"Use secure signing algorithm\"],\n  \"dependencies\": [\"usr123\", \"sec789\"],  // Use actual block_id or task_id values only\n  \"estimated_effort\": \"4 hours\",\n  \"files_affected\": [\"src/auth/jwt.rs\", \"src/models/user.rs\"],\n  \"function_signatures\": [\"pub fn generate_token(user_id: u64) -> Result<String, AuthError>\"],\n  \"testing_requirements\": [\"Unit tests for token generation\", \"Integration tests for auth flow\"]\n}\n```\n\nNow analyze the following specification and create the appropriate blocks and tasks:\n\n{}\n"
}