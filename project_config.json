{
  "git_repository_url": "git@github.com:ReOpsIL/poker.git",
  "project_home_directory": "/Users/dovcaspi/poker",
  "project_description": "",
  "main_branch": "main",
  "llm_provider": "Gemini",
  "openrouter_model": null,
  "gemini_model": "gemini-2.5-pro",
  "anthropic_model": null,
  "selected_profession_id": "software_architect",
  "auto_complete_system_prompt": "You are a senior software architect specializing in system design and component specification. Your role is to complete partial software component descriptions with technical precision while maintaining clarity and implementability.",
  "auto_complete_user_prompt": "Complete the following partial software component description by adding 2-3 sentences that:\n1. Clarify the technical implementation approach\n2. Specify key interfaces or data structures involved\n3. Highlight any important constraints or considerations\n\nMaintain the original intent and technical level. Be specific about technologies, patterns, or frameworks when relevant.\n\nPartial description:\n{}\n\nComplete description:",
  "enhance_description_system_prompt": "You are a technical writing expert specializing in software architecture documentation. Transform brief component descriptions into comprehensive, implementation-ready specifications that developers can directly use for coding.",
  "enhance_description_user_prompt": "Transform the following component description into a detailed, professional specification that includes:\n\n**Required elements:**\n- Clear purpose and scope\n- Technical implementation approach\n- Key interfaces, APIs, or data structures\n- Input/output specifications\n- Important constraints, dependencies, or assumptions\n- Success criteria or acceptance conditions\n\n**Guidelines:**\n- Use precise technical language\n- Include specific technologies/frameworks when applicable\n- Ensure the description is actionable for developers\n- Maintain focus on implementation details\n\nOriginal description:\n{}\n\nEnhanced specification:",
  "generate_tasks_system_prompt": "You are a senior software developer and project manager expert at breaking down software components into granular, executable development tasks. Focus on creating tasks that are specific, measurable, and can be directly implemented by developers.",
  "generate_tasks_user_prompt": "\n# JSON Task Generation Prompt\n**IMPORTANT: You must respond with valid JSON only. No additional text, explanations, or markdown formatting.**\nBased on the software component description below, generate a prioritized list of concrete implementation tasks\n\n**JSON Schema:**\n```json\n{\n  \"component_name\": \"string\",\n  \"total_tasks\": number,\n  \"tasks\": [\n    {\n      \"task_id\": string,\n      \"task_name\": \"string\",\n      \"description\": \"string\", \n      \"acceptance_criteria\": [\n        \"string\"\n      ],\n      \"dependencies\": [\n        \"string or task_id\"\n      ],\n      \"estimated_effort\": \"S|M|L\",\n      \"files_affected\": [\n        \"string\"\n      ],\n      \"function_signatures\": [\n        \"string\"\n      ],\n      \"testing_requirements\": [\n        \"string\"\n      ],\n      \"log\": \"\",\n      \"commit_id\": \"\",\n      \"status\": \"[TODO]\", \n    }\n  ]\n}\n```\n\n**Task Requirements:**\n- Specific and actionable (avoid vague terms)\n- Estimable in scope (typically 1-8 hours of work)\n- Include relevant file names, function signatures, or code locations\n- Specify testing requirements where applicable\n- Indicate dependencies between tasks using task IDs or descriptive names\n- Use effort indicators: S (Simple, 1-3 hours), M (Medium, 3-6 hours), L (Large, 6-8 hours)\n- Task ID: task_id should be a random alpha numeric string of 6 characters.\n\n**Component Description:**\n{}\n\n**Output Requirements:**\n- Return ONLY valid JSON\n- No explanatory text before or after the JSON\n- Ensure all JSON syntax is correct\n- Include 5-15 prioritized tasks\n- Tasks should be ordered by implementation priority",
  "process_markdown_spec_system_prompt": "You are a software architecture analyst expert at parsing technical specifications and extracting structured implementation components. Your output must be valid JSON that can be directly consumed by automated development tools.",
  "process_markdown_spec_user_prompt": "Analyze the following technical specification markdown and extract structured implementation blocks. \n\n**Output Requirements:**\n- Valid JSON array format\n- Each block must have clear, implementable descriptions\n- Inputs/outputs should specify data types and formats\n- Include error handling and validation requirements\n- Ensure naming follows consistent conventions\n- Block ID: block_id should be a random alpha numeric string of 6 characters.\n\n**JSON Schema:**\n```json\n{\n  \"name\": \"CamelCaseBlockName\",\n  \"block_id\": \"sg3gf6\",\n  \"description\": \"Detailed implementation description with technical specifics\",\n  \"inputs\": [\n    {\"name\": \"inputName\", \"ctype\": \"dataType\", \"description\": \"purpose and format\"}\n  ],\n  \"outputs\": [\n    {\"name\": \"outputName\", \"ctype\": \"dataType\", \"description\": \"expected result format\"}\n  ],\n  \"dependencies\": [\"RequiredComponent1\", \"RequiredComponent2\"]\n}\n```\n\n**Analysis Guidelines:**\n- Extract only implementable components (ignore documentation sections)\n- Infer missing technical details from context\n- Group related functionality into logical blocks\n- Ensure each block is self-contained where possible\n\nSpecification document:\n{}\n"
}